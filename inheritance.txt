inheritance helps with DRY
    reusing shared data between classes
    base class --> derived class
functions and attributes passed

base class in () when defining derived class
    class Base:
        #blah blah blah

    class Derived (Base):
        #blah blah blah

even if derived is empty, objects made with derived class inherit all of base class functionality
to call base class functiuon in derived clas, prefix func call with super
    super().func()

can override methods in derived class

polymorphism --> one thing can take on many forms

Slot --> optional feature to reduce memory overhead and faster attribute access
    declare __slots__ with all instance attributes
    cannot dynamically add new attributes to instance with slots


multiple inheritance --> inherit functionality from more than one parent class  mostly used for 'mixin' classes
    add additional functionality without having to change base class and other derived classes

method resolution order
    how the object determines whic version of a function to use
    use __mro__ attribute to see